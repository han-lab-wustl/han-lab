import os, sys
sys.path.append(r'C:\Users\Han\Documents\MATLAB\han-lab') ## custom to your clone
import numpy as np
import matplotlib.pyplot as plt
from scipy.io import loadmat
from projects.DLC_behavior_classification.eye import perireward_binned_activity
from projects.opto.analysis.pyramidal.placecell import perivelocitybinnedactivity
# zahra adaptation of gm's code
# sst individual cell profiles

# clear all; close all
plt.close('all')

an = 'e136'
dy = 6

# load(fullfile("Y:\\analysis\\fmats", sprintf("%s", an), sprintf("%s\_day%03d\_plane0\_Fall.mat", an, dy)));
mat_file = os.path.join("Y:\\analysis\\fmats", an, f"{an}_day{dy:03d}_plane0_Fall.mat")
pln0 = loadmat(mat_file)

# pln0 = load(fullfile("Y:\\analysis\\fmats", sprintf("%s", an), sprintf("%s\_day%03d\_plane0\_Fall.mat", an, dy)));
mat_file = os.path.join("Y:\\analysis\\fmats", an, f"{an}_day{dy:03d}_plane1_Fall.mat")
pln1 = loadmat(mat_file)

# pln2 = load(fullfile("Y:\\analysis\\fmats", sprintf("%s", an), sprintf("%s\_day%03d\_plane2\_Fall.mat", an, dy)));
mat_file = os.path.join("Y:\\analysis\\fmats", an, f"{an}_day{dy:03d}_plane2_Fall.mat")
pln2 = loadmat(mat_file)

plns = [pln0, pln1, pln2]
planes = 3

bin_size = 0.2  # s
range_val = 10  # s

eps = np.where(pln0['changeRewLoc'] > 0)[0]
eps = np.append(eps, len(pln0['changeRewLoc']) - 1)

track_length = 180  # cm; TODO: import from VR instead
nbins = int(track_length / bin_size)

rewlocs = pln0['changeRewLoc'][pln0['changeRewLoc'] > 0]
rewsize = 10  # cm

grayColor = [0.7, 0.7, 0.7]

savedst = 'C:\\Users\\Han\\Box\\neuro_phd_stuff\\han_2023-\\figure_data\\sst'

# params to export to pptx
# pptx = exportToPPTX('', ...
#     'Dimensions',[12 6], ...
#     'Title','cell profiles', ...
#     'Author','Zahra', ...
#     'Subject','Automatically generated PPTX file', ...
#     'Comments','This file has been automatically generated by exportToPPTX');

dFF_all_planes = [pln0['dFF_iscell'], pln1['dFF_iscell'], pln2['dFF_iscell']]

for plane in range(planes):
    dff = dFF_all_planes[plane].T

    # [binnedPerireward,allbins,rewdFF,normmeanrewdFF] = perirewardbinnedactivity(dff,rewards,timedFF, ...
    #     range,bin_size);
    binnedPerireward, allbins, rewdFF, 
    normmeanrewdFF = perireward_binned_activity(dff, pln0['rewards'], pln0['timedFF'], range_val, bin_size)

    # [binnedvel,~,rewvel] = perirewardbinnedvelocity(forwardvel,rewards,timedFF, ...
    #     range,bin_size);
    binnedvel, _, rewvel = perirewardbinnedvelocity(pln0['forwardvel'], pln0['rewards'], pln0['timedFF'], range_val, bin_size)

    fig, axs = plt.subplots(nrows=int(np.ceil(np.sqrt(dff.shape[1]))), ncols=int(np.ceil(np.sqrt(dff.shape[1]))), figsize=(16, 9))
    axs = axs.ravel()

    # slideId = pptx.addSlide();
    # fprintf('Added slide %d\\n',slideId);

    for cll in range(dff.shape[1] + 1):
        ax = axs[cll]

        for rewind in range(rewdFF.shape[2]):
            try:  # to allow for velocity plot
                ax.plot(rewdFF[:, cll, rewind], color=grayColor)  # plot each trial
            except:
                pass

        try:
            ax.plot(binnedPerireward[cll, :], 'k', linewidth=1.5)  # mean trial plot each cell
        except:
            pass

        ax.axvline(np.median(range(allbins.shape[1])), color='b', linestyle='--', linewidth=1.5)  # mark reward
        ax.set_xticks(np.arange(0, allbins.shape[1] + 1, 25))
        ax.set_xticklabels(np.arange(-range_val, range_val + 5, 5))
        ax.set_xlabel('Time (s) from Reward')

        if cll == dff.shape[1]:
            for rewind in range(rewvel.shape[1]):
                ax.plot(rewvel[:, rewind], 'k')  # plot each trial

            ax.set_ylabel('Velocity (cm/s)')
            ax.axvline(np.median(range(allbins.shape[1])), color='b', linestyle='--', linewidth=1.5)  # mark reward
            ax.set_xticks(np.arange(0, allbins.shape[1] + 1, 25))
            ax.set_xticklabels(np.arange(-range_val, range_val + 5, 5))

    fig.suptitle(f'All successful trials, plane {plane + 1}')
    plt.tight_layout()
    plt.savefig(os.path.join(savedst, f"{an}_successful_trials_cell_profiles_peri_reward_plane{plane + 1}.jpg"))
    plt.close(fig)
