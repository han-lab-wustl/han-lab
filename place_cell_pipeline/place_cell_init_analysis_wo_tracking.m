% Zahra
% makes tuning curves with velocity filter
% uses suyash's binning method
% per day analysis using iscell boolean
% calls functions to make tuning curves, etc. uses median com
% this run function mostly makes plots
clear all;

% an = 'e200';
% an = 'e201';
% an = 'e145';
an = 'e218';
% an = 'e139';
% individual day analysis
% dys = [1,2,3,5,6,7,8,9,10];
dys = [24:29];
% dys = [50:52,54]%:73, 75];
% dys = [62:67,69:70,72:74,76,81:85];
% dys = [4:7, 9:11];
savedst = 'Y:\sstcre_analysis\figures'; % for figures
src = 'X:\vipcre'; % folder where fall is
% pptx    = exportToPPTX(fullfile('Y:\sstcre_analysis',sprintf('%s_tuning_curves_w_ranksum',an)));
pptx    = exportToPPTX('', ... % make new file
    'Dimensions',[12 6], ...
    'Title','tuning curves', ...
    'Author','zahra', ...
    'Subject','Automatically generated PPTX file', ...
    'Comments','This file has been automatically generated by exportToPPTX');
% src = 'Y:\sstcre_analysis\fmats';
for dy=dys
    clearvars -except dys an cc dy pptx src savedst
    pth = dir(fullfile(src, an, string(dy), '**\*Fall.mat'));
    % load vars
    load(fullfile(pth.folder,pth.name), 'dFF', ...
        'Fc3', 'stat', 'iscell', 'ybinned', 'changeRewLoc', ...
        'forwardvel', 'licks', 'trialnum', 'rewards', 'tuning_curves', 'coms')
    % vars to get com and tuning curves
    bin_size = 3; % cm
    gainf = 3/2; % 3/2 VS. 1
    track_length = 180*gainf;
    rew_zone = 10; % cm
    % zahra hard coded to be consistent with the dopamine pipeline
    thres = 5; % 5 cm/s is the velocity filter, only get
    % frames when the animal is moving faster than that
    ftol = 10; % number of frames length minimum to be considered stopped
    ntrials = 8; % e.g. last 8 trials to compare
    nbins = track_length/bin_size;
    plns = [0]; % number of planes
    Fs = 31.25/length(plns);
    rewlocs = changeRewLoc(changeRewLoc>0)*(gainf);
    % for copied falls
    if exist('tuning_curves','var') == 1 && exist('coms','var') == 1 % check if struct already has these saved
    else
        [tuning_curves, coms] = make_tuning_curves(changeRewLoc, trialnum, rewards, ybinned, ...
            licks, forwardvel, thres, Fs, ftol, bin_size, stat, iscell, plns, Fc3);
    end
    % if greater than 3 ep, do all comparisons
    comparisons = nchoosek(1:sum(cellfun(@(x) ~isempty(x),tuning_curves)),2);
    for i=1:length(comparisons)
        comparison = comparisons(i,:);
        if exist('ep_comp_pval', 'var') == 1 % if pvals already calculated
            pvals  = ep_comp_pval(:,3);
            p = pvals(i);
        else
            [p,h,s] = do_tuning_curve_ranksum_test(tuning_curves{comparison(1)}', ...
                tuning_curves{comparison(2)}');
            pvals(i) = p;
        end
        disp(p)
        slideId = pptx.addSlide();
        fprintf('Added slide %d\n',slideId);
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%fig 1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        fig = figure('Renderer', 'painters');
        subplot(1,2,1)
        plt = tuning_curves{comparison(1)}';
        [~,sorted_idx] = sort(coms{comparison(1)}); % sorts first tuning curve rel to another
        imagesc(normalize(plt(sorted_idx,:),2));
        % plot rectangle of rew loc
        % everything divided by 3 (bins of 3cm)
        rectangle('position',[ceil(rewlocs(comparison(1))/bin_size)-ceil((rew_zone/bin_size)/2) 0 ...
            rew_zone/bin_size size(plt,1)], ... % just picked max for visualization
            'EdgeColor',[0 0 0 0],'FaceColor',[1 1 1 0.5])
        colormap jet
        xticks([0:bin_size:ceil(track_length/bin_size)])
        xticklabels([0:bin_size*bin_size:track_length])
        title(sprintf('epoch %i', comparison(1)))
        hold on;
        subplot(1,2,2)
        plt = tuning_curves{comparison(2)}';
        imagesc(normalize(plt(sorted_idx,:),2));
        % plot rectangle of rew loc
        % everything divided by 3 (bins of 3cm)
        rectangle('position',[ceil(rewlocs(comparison(2))/bin_size)-ceil((rew_zone/bin_size)/2) 0 ...
            rew_zone/bin_size size(plt,1)], ... % just picked max for visualization
            'EdgeColor',[0 0 0 0],'FaceColor',[1 1 1 0.5])
        colormap jet
        xticks([0:bin_size:ceil(track_length/bin_size)])
        xticklabels([0:bin_size*bin_size:track_length])
        title(sprintf('epoch %i', comparison(2)))
        sgtitle(sprintf(['animal %s, day %i \n' ...
            'ep%i vs ep%i: ranksum = %d'], an, dy, comparison(1), comparison(2),...
            p))
        pptx.addPicture(fig);
        close(fig)
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%fig 2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        slideId = pptx.addSlide();
        fprintf('Added slide %d\n',slideId);
        fig = figure('Renderer', 'painters');
        plot(coms{comparison(1)}, coms{comparison(2)}, 'ko'); hold on;
        xline(rewlocs(comparison(1)), 'r', 'LineWidth', 3);
        yline(rewlocs(comparison(2)), 'r', 'LineWidth', 3)
        plot([0:track_length],[0:track_length], 'k', 'LineWidth',2)
        xlim([0 track_length]); ylim([0 track_length])
        xlabel(sprintf('ep%i', comparison(1)));
        ylabel((sprintf('ep%i', comparison(2))))
        title(sprintf(['COM (median) \n ' ...
            'animal %s, day %i,' ...
            'comparison: ep%i vs ep%i'], an, dy, comparison(1), comparison(2)))
        pptx.addPicture(fig);
        pptx.addNote(sprintf('slide number %d',slideId));
        close(fig)
    end
    slideId = pptx.addSlide();
    fprintf('Added slide %d\n',slideId);
    fig = figure('Renderer', 'painters', 'Position', [10 10 1050 800]);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%fig 3%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    for ep=1:length(eps)-1
        % only analyse until ep 3
        subplot(1,length(eps)-1,ep)
        plt = tuning_curves{ep}';
        % sort all by ep 1
        [~,sorted_idx] = sort(coms{1});
        imagesc(normalize(plt(sorted_idx,:),2));
        hold on;
        % plot rectangle of rew loc
        % everything divided by 3 (bins of 3cm)
        rectangle('position',[ceil(rewlocs(ep)/bin_size)-ceil((rew_zone/bin_size)/2) 0 ...
            rew_zone/bin_size size(cell_activity,2)], ... % just picked max for visualization
            'EdgeColor',[0 0 0 0],'FaceColor',[1 1 1 0.5])
        colormap jet
        xticks([0:bin_size:ceil(track_length/bin_size)])
        xticklabels([0:bin_size*bin_size:track_length])
        title(sprintf('epoch %i', ep))
    end

    sgtitle(sprintf(['animal %s, day %i'], an, dy))
    pptx.addPicture(fig);
    pptx.addTextbox(sprintf('%s_day%i',an,dy));
    pptx.addNote(sprintf('slide number %d',slideId));

    %     savefig(fullfile(savedst,sprintf('%s_day%i_tuning_curves_w_ranksum.fig',an,dy)))
    close(fig)

    % also append fall with tables
    ep_comp_pval = array2table([comparisons pvals'], 'VariableNames', {'ep_comparison1', 'ep_comparison2', 'cs_ranksum_pval'});
    save(fullfile(pth.folder,pth.name), 'ep_comp_pval', 'coms','tuning_curves', '-append')
end
% save ppt
fl = pptx.save(fullfile('Y:\sstcre_analysis',sprintf('%s_tuning_curves_w_ranksum_opto',an)));

% fl = pptx.save(fullfile('Y:\sstcre_analysis',sprintf('%s_tuning_curves_w_ranksum',an)));