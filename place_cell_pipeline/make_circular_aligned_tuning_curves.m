% Zahra - Nov 2023
% makes tuning curves with velocity filter
% uses suyash's binning method

% per day analysis using iscell boolean and putative place cells identified
% from spatial info shuffle

% calls functions to calc dff, fc3, putative place cells, 
% make tuning curves, etc. uses median com

% this run script mostly makes plots but calls other functions
% add han-lab and han-lab-archive repos to path! 
clear all;
% an = 'e190';%an='e189';
% individual day analysis 
an = 'e218'; dys = [20:50]; % e218
% an = 'e216';  dys = [7:10, 32,33,35:63,65]; % e216
% an = 'e217'; dys = [2:20, 26,27]; %e217
% an = 'e201'; dys = [27:30, 32,33,34,36,38,40:75]; % e201
% an = 'e200'; dys = [62:70, 72,73,74, 76, 80:90]; % e200
% an = 'e189'; dys = [7,8,10,11:15,17:21,24:42,44:46]; % e189
% an = 'e190'; dys = [6:9, 11,13,15:19,21,22,24,27:29,33:35,40:43,45]; % e190
% an = 'e186'; dys = [1:51]; % e186
% src = 'X:\vipcre'; % folder where fall is
savedst = 'C:\Users\Han\Box\neuro_phd_stuff\han_2023-\figure_data'; % where to save ppt of figures
src = 'Y:\analysis\fmats';
pptx    = exportToPPTX('', ... % saves all figures to ppt
    'Dimensions',[12 6], ...
    'Title','tuning curves', ...
    'Author','zahra', ...
    'Subject','Automatically generated PPTX file', ...
    'Comments','This file has been automatically generated by exportToPPTX');

for dy=dys % for loop per day
    clearvars -except dys an cc dy src savedst pptx
    % pth = dir(fullfile(src, an, string(dy), '**\*Fall.mat'));
    pth = dir(fullfile(src, an, 'days', sprintf('%s_day%03d*plane0*', an, dy)));
    % load vars
    load(fullfile(pth.folder,pth.name), 'dFF', ...
        'Fc3', 'stat', 'iscell', 'ybinned', 'changeRewLoc', ...
        'forwardvel', 'licks', 'trialnum', 'rewards', 'tuning_curves', 'coms', ...
        'putative_pcs', 'VR')
    % vars to get com and tuning curves
    try
        gainf = 1/VR.scalingFACTOR;
    catch
        gainf = 3/2; % 3/2 VS. 1; in this pipeline the gain is multiplied everywhere
    end
    track_length = 180*gainf;
    try
        rew_zone = VR.settings.rewardZone*gainf; % cm
    catch
        rew_zone = 15;
    end
    % zahra hard coded to be consistent with the dopamine pipeline
    thres = 5; % 5 cm/s is the velocity filter, only get
    % frames when the animal is moving faster than that
    ftol = 10; % number of frames length minimum to be considered stopped
    ntrials = 5; % e.g. last 8 trials to compare    
    plns = [0]; % number of planes
    Fs = 31.25/length(plns);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% CHECKS %%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%
    % check to see if changerewloc same length as fc3 (only a problem for old
    % multiplane rec
    if (size(Fc3,1)<size(changeRewLoc,2))
        ybinned = ybinned(1:end-1);
        changeRewLoc = changeRewLoc(1:end-1);
        forwardvel = forwardvel(1:end-1);
        trialnum = trialnum(1:end-1);
        rewards = rewards(1:end-1);
    end
    eps = find(changeRewLoc>0);
    eps = [eps length(changeRewLoc)];    
    rewlocs = changeRewLoc(changeRewLoc>0)*(gainf);
    rewzonenum = get_rewzones(rewlocs, gainf); % get rew zone identity too:  a=[{67:86} {101:120} {135:154}];
%     if exist('tuning_curves','var') == 1 && exist('coms','var') == 1 % check if struct already has these saved
%     else
        % get place cells only
        pcs = reshape(cell2mat(putative_pcs), [length(putative_pcs{1}), length(putative_pcs)]);
        pc = logical(iscell(:,1))';
        [~,bordercells] = remove_border_cells_all_cells(stat, Fc3);        
        fc3_pc = Fc3(:,(pc & ~bordercells)); % remove border cells
        fc3_pc = fc3_pc(:, any(pcs,2)); % apply place cell filter, if a cell is considered a place cell in any ep!!
        dff_pc = dFF(:,(pc & ~bordercells)); % remove border cells
        dff_pc = dff_pc(:, any(pcs,2)); % apply place cell filter, if a cell is considered a place cell in any ep!!
        nbins = 90;
        bin_size = 2*pi/nbins;
    [ybinned_circ] = convert_ypos_to_circular_coords_per_ep(ybinned*gainf, rewlocs, eps, track_length);
        [tuning_curves_pc_circular_late_trials, coms_pc_circular_late_trials, median_com, peak] = make_circular_tuning_curves(eps, trialnum, rewards, ybinned_circ+pi, gainf, ntrials,...
    licks, forwardvel, thres, Fs, ftol, bin_size, fc3_pc, dff_pc, nbins);
        % early trials
        [tuning_curves_pc_circular_early_trials, coms_pc_circular_early_trials, ~,~] = make_circular_tuning_curves_per_trial(eps, trialnum, rewards, ybinned_circ+pi, gainf,...
    licks, forwardvel, thres, Fs, ftol, bin_size, fc3_pc, dff_pc, nbins, [1,2,3]); % first 3 trials of epoch
        fprintf('********calculated tuning curves!********\n')
%     end
    %%%%%%%%%%%%%%%%%%%%%%%%%%fig 3%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% step 4 - make summary fig for epoch comparisons
    slideId = pptx.addSlide();
    fprintf('Added slide %d\n',slideId);
    fig = figure('Renderer', 'painters', 'Position', [10 10 1050 800]);
    for ep=1:length(eps)-1
        subplot(1,length(eps)-1,ep)
        plt = tuning_curves_pc_circular_late_trials{ep};
        % sort all by ep 1
        [~,sorted_idx] = sort(coms_pc_circular_late_trials{1});
        imagesc(normalize(plt(sorted_idx,:),2));
        hold on;
        colormap jet        
        title(sprintf('epoch %i', ep))
    end

    sgtitle(sprintf(['animal %s, day %i, circular coordinates'], an, dy))
    %     savefig(fullfile(savedst,sprintf('%s_day%i_tuning_curves_w_ranksum.fig',an,dy)))
    pptx.addPicture(fig);   
    save(fullfile(pth.folder,pth.name), 'tuning_curves_pc_circular_early_trials', 'coms_pc_circular_early_trials', ...
        'tuning_curves_pc_circular_late_trials', 'coms_pc_circular_late_trials', 'ybinned_circ','-append')
end

% save ppt
fl = pptx.save(fullfile(savedst,sprintf('%s_tuning_curves_circ_pc',an)));